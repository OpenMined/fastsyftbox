name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        exclude:
          # Exclude Python 3.13 on Windows if there are known issues
          # - os: windows-latest
          #   python-version: '3.13'
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: |
          **/pyproject.toml
          
    - name: Create virtual environment
      run: uv venv
      
    - name: Install dependencies
      run: |
        uv sync --extra dev
        
    - name: Show environment info
      run: |
        uv run python --version
        uv run pip list
        
    - name: Make test.sh executable (Unix)
      if: runner.os != 'Windows'
      run: chmod +x test.sh
      
    - name: Run tests (Unix)
      if: runner.os != 'Windows'
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.python-version }}" == "3.12" ]]; then
          # Run with coverage on Ubuntu Python 3.12
          ./test.sh --coverage-format all
        else
          # Run without coverage on other combinations
          ./test.sh --no-coverage
        fi
      shell: bash
      env:
        PYTHONPATH: ${{ github.workspace }}
        
    - name: Run tests (Windows)
      if: runner.os == 'Windows'
      run: |
        # Windows doesn't support the bash test.sh script, so run pytest directly
        uv run pytest tests/ -v --tb=short --maxfail=10
      env:
        PYTHONPATH: ${{ github.workspace }}
        
    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          coverage.json
          htmlcov/
          
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  performance-tests:
    name: Performance Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Install dependencies
      run: |
        uv sync --extra dev
        
    - name: Run performance tests
      run: |
        uv run pytest tests/test_performance.py -v --tb=short
      env:
        PYTHONPATH: ${{ github.workspace }}

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        
    - name: Make lint.sh executable
      run: chmod +x lint.sh
      
    - name: Run lint checks
      run: ./lint.sh --check --verbose
      continue-on-error: true  # Type checking might have some issues initially

  test-cli:
    name: Test CLI Installation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.12']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Build package
      run: |
        uv run python -m pip install build
        uv run python -m build
        
    - name: Test package installation (Windows)
      if: runner.os == 'Windows'
      run: |
        # Create a fresh virtual environment for testing
        uv venv test-env
        
        # Install the built package
        test-env\Scripts\pip install dist\fastsyftbox-*.whl
        
        # Test installed CLI
        test-env\Scripts\fastsyftbox version
        test-env\Scripts\fastsyftbox --help
        
    - name: Test package installation (Unix)
      if: runner.os != 'Windows'
      run: |
        # Create a fresh virtual environment for testing
        uv venv test-env
        
        # Install the built package
        test-env/bin/pip install dist/fastsyftbox-*.whl
        
        # Test installed CLI
        test-env/bin/fastsyftbox version
        test-env/bin/fastsyftbox --help

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Install build dependencies
      run: |
        uv pip install build twine
        
    - name: Build distribution
      run: |
        uv run python -m build
        
    - name: Check distribution
      run: |
        uv run twine check dist/*
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  all-tests-pass:
    name: All Tests Pass
    needs: [test, performance-tests, lint, test-cli, build]
    runs-on: ubuntu-latest
    steps:
      - name: Check test results
        run: echo "All tests passed successfully!"